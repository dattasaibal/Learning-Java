
Best Explanation for arranging elements according to user defined priority in Java defined Priority Queue


Source of below explanation: http://stackoverflow.com/questions/683041/java-how-do-i-use-a-priorityqueue



Use the constructor overload which takes a Comparator<? super E> comparator and pass in a comparator 
which compares in the appropriate way for your sort order. If you give an example of how you want to sort,
we can provide some sample code to implement the comparator if you're not sure. (It's pretty 
straightforward though.)

As has been said elsewhere: offer and add are just different interface method implementations.
In the JDK source I've got, add calls offer. Although add and offer have potentially different 
behaviour in general due to the ability for offer to indicate that the value can't be added due 
to size limitations, this difference is irrelevant in PriorityQueue which is unbounded.

Here's an example of a priority queue sorting by string length:



package Demo;



//Test.java

import java.util.Comparator;

import java.util.PriorityQueue;



public class Test

{

 public static void main(String[] args)

 {

     Comparator<String> comparator = (Comparator<String>) new StringLengthComparator();

     PriorityQueue<String> queue = new PriorityQueue<String>(10, comparator);

     queue.add("short");

     queue.add("very long indeed");

     queue.add("medium");

     while (queue.size() != 0)

     {

         System.out.println(queue.remove());

     }

 }

}

package Demo;





//StringLengthComparator.java (new java file)

import java.util.Comparator;



public class StringLengthComparator implements Comparator<String>

{

 @Override

 public int compare(String x, String y)

 {

     // Assume neither string is null. Real code should

     // probably be more robust

     if (x.length() < y.length())

     {

         return -1;

     }

     if (x.length() > y.length())

     {

         return 1;

     }

     return 0;

 }

}
